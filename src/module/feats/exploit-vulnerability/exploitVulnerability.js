import { deleteEVEffect } from "../../socket.js";
import { OFF_GUARD_EFFECT_UUID } from "../../utils/index.js";
import {
  createEffectData,
  getActorEVEffect,
  hasFeat,
} from "../../utils/helpers.js";
import { EVDialog } from "./evDialog.js";
import { createPAOnActor } from "./helpers.js";

async function exploitVuln() {
  //grab the selected token and the targeted token
  const a = canvas.tokens.controlled;
  let ts = Array.from(game.user.targets);

  //make sure we're only targeting one target and have the thaum selected
  if (a.length != 1 || ts.length != 1) {
    return ui.notifications.warn(
      game.i18n.localize(
        "pf2e-thaum-vuln.notifications.warn.exploitVulnerability.targetCount"
      )
    );
  }

  //set the first index in the array as the target and the first controlled token actor as selected actor
  const t = Array.from(ts)[0];
  const sa = a[0].actor;

  //check for exploit vulnerability on the actor
  if (!hasFeat(sa, "exploit-vulnerability")) {
    return ui.notifications.warn(
      game.i18n.localize(
        "pf2e-thaum-vuln.notifications.warn.exploitVulnerability.noExploitVulnerability"
      )
    );
  }

  if (game.settings.get("pf2e-thaum-vuln", "enforceHeldImplement")) {
    if (!Object.values(sa.attributes.implements).some((i) => i.item)) {
      return ui.notifications.warn(
        game.i18n.localize(
          "pf2e-thaum-vuln.notifications.warn.exploitVulnerability.noImplements"
        )
      );
    }
    if (!Object.values(sa.attributes.implements).some((i) => i.item?.isHeld)) {
      return ui.notifications.warn(
        game.i18n.localize(
          "pf2e-thaum-vuln.notifications.warn.exploitVulnerability.noHeldImplement"
        )
      );
    }
  }

  //deletes Exploit Vulnerability effect if it already exists on the actor
  const deleteEffectTargs = preDeleteEffect(canvas.tokens.placeables, sa);
  if (deleteEffectTargs.length > 0) {
    deleteEVEffect(deleteEffectTargs.flat());
  }
  for (let act of canvas.tokens.placeables) {
    let EWEffect = act.actor?.items.find(
      (item) =>
        item.name ===
        game.i18n.localize("pf2e-thaum-vuln.esotericWarden.effect.name")
    );
    if (
      EWEffect &&
      (act.actor === sa ||
        act.actor.getFlag("pf2e-thaum-vuln", "EWSourceActor") === sa.uuid)
    ) {
      EWEffect.delete();
    }
  }

  // From https://gist.github.com/stwlam/01c2506e93c298b01ad83c182b245144 by somebody, Supe, and stwlam
  const skill =
    sa.skills["esoteric-lore"] ??
    sa.skills["esoteric"] ??
    sa.skills["lore-esoteric"];
  if (!skill) {
    return ui.notifications.warn(
      game.i18n.localize(
        "pf2e-thaum-vuln.notifications.warn.exploitVulnerability.noEsotericLoreSkill"
      )
    );
  }

  let notes = [];
  if (hasFeat(sa, "diverse-lore")) {
    // todo: put npc identify data in the document and then show secret text for it.
    // TODO: Error checking for rolling against PCs
    const dc =
      14 +
      Math.floor(t.actor.level / 3) +
      game.settings.get("pf2e-thaum-vuln", "esotericLoreModifier") +
      (game.pf2e.settings.variants.pwol.enabled
        ? 0
        : t.actor.level + (t.actor.level < 0));
    const diverseLoreDC = dc
      ? `<br/><span data-visibility="gm">Recall Knowledge DC ${dc}</span>`
      : "";

    notes.push({
      title: game.i18n.localize("pf2e-thaum-vuln.diverseLore.name"),
      text:
        game.i18n.localize("pf2e-thaum-vuln.diverseLore.flavor") +
        diverseLoreDC,
      outcome: ["success", "criticalSuccess"],
      predicate: ["feat:diverse-lore"],
    });
  }

  const result = await game.pf2e.actions.get("exploit-vulnerability").use({
    actors: [sa],
    target: t.document,
    notes,
    event,
  });
  const evRoll = result[0].roll;

  const rollDOS = evRoll?.degreeOfSuccess;
  //Apply effect based on Degrees of success
  switch (rollDOS) {
    case 0:
      //critical failure. Apply off-guard condition for one round.
      await sa.createEmbeddedDocuments("Item", [
        await createEffectData(OFF_GUARD_EFFECT_UUID, {
          actor: sa.uuid,
        }),
      ]);
      break;
    case 1:
      //normal failure. Can only apply personal antithesis.
      await createPAOnActor(sa, t, rollDOS);
      break;
    case 2:
      //normal success. Learns highest weakness. Can apply Mortal Weakness or Personal Antithesis
      new EVDialog(t, sa, 2).render(true);
      break;
    case 3:
      //Critical success. Learns all weaknesses, resistances, and immunities including the amounts and any unusual weaknesses or vulnerabilities
      //Can apply Mortal Weakness or Personal Antithesis.
      new EVDialog(t, sa, 3).render(true);
      break;
    default:
      return;
  }
}

function preDeleteEffect(a, sa = undefined) {
  let effects = new Array();
  for (let token of a) {
    token = token.actor ?? token;
    const effs = getActorEVEffect(token, sa?.uuid);
    for (const effect of effs) {
      if (
        effect.flags["pf2e-thaum-vuln"]?.EffectOrigin === sa?.uuid ||
        effect.flags["pf2e-thaum-vuln"]?.EffectOrigin === token?.uuid
      ) {
        effects.push(effect.uuid);
      }
    }
  }
  return effects;
}

Hooks.once("init", () => {
  const climb = game.pf2e.actions.get("climb");
  const SingleCheckAction = Object.getPrototypeOf(climb).constructor;
  const notes = [
    "criticalSuccess",
    "success",
    "failure",
    "criticalFailure",
  ].map((dos) => ({
    title: game.i18n.localize(`PF2E.Check.Result.Degree.Check.${dos}`),
    text: game.i18n.localize(
      `pf2e-thaum-vuln.exploitVulnerability.degreeOfSuccess.${dos}`
    ),
    outcome: [dos],
  }));

  notes.push({
    title: game.i18n.localize("pf2e-thaum-vuln.esotericWarden.name"),
    text: game.i18n.localize("pf2e-thaum-vuln.esotericWarden.flavor"),
    outcome: ["success", "criticalSuccess"],
    predicate: ["feat:esoteric-warden"],
  });

  const ExploitVulnerability = new SingleCheckAction({
    cost: 1,
    description: "pf2e-thaum-vuln.exploitVulnerability.flavor",
    name: "pf2e-thaum-vuln.exploitVulnerability.name",
    notes,
    rollOptions: ["action:exploit-vulnerability"],
    slug: "exploit-vulnerability",
    difficultyClass: "exploit-vulnerability",
    statistic: "esoteric-lore",
    traits: ["esoterica", "manipulate", "thaumaturge"],
  });

  game.pf2e.actions.set("exploit-vulnerability", ExploitVulnerability);
});

export { exploitVuln, preDeleteEffect };
