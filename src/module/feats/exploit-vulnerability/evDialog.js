import {
  BREACHED_DEFENSES_EFFECT_UUID,
  BREACHED_DEFENSES_SOURCEID,
  MORTAL_WEAKNESS_EFFECT_UUID,
  PERSONAL_ANTITHESIS_EFFECT_UUID,
} from "../../utils";
import {
  BDGreatestBypassableResistance,
  getGreatestIWR,
  getIWR,
} from "../../utils/helpers";
import { createEffectOnActor } from "./helpers";

const { ApplicationV2, HandlebarsApplicationMixin } = foundry.applications.api;

export class EVDialog extends HandlebarsApplicationMixin(ApplicationV2) {
  target;
  actor;
  rollDOS;

  constructor(target, actor, rollDOS) {
    super();
    this.target = target;
    this.actor = actor;
    this.rollDOS = rollDOS;
  }

  static DEFAULT_OPTIONS = {
    id: "ev-dialog",
    classes: ["pf2e-thaum-vuln", "ev-dialog"],
    tag: "div",
    position: { width: 400 },
    window: { title: "" },
  };

  static PARTS = {
    main: {
      template: "modules/pf2e-thaum-vuln/templates/evDialog/parts/main.hbs",
      id: "main",
    },
    footer: {
      template: "modules/pf2e-thaum-vuln/templates/partials/footer.hbs",
    },
  };
  _onRender(context, options) {
    const paBtn = this.element.querySelector(".personal-antithesis");
    const mwBtn = this.element.querySelector(".mortal-weakness");
    const bdBtn = this.element.querySelector(".breached-defenses");

    if (paBtn) {
      paBtn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopImmediatePropagation();
        createEffectOnActor(
          this.actor,
          this.target,
          PERSONAL_ANTITHESIS_EFFECT_UUID
        );
        this.close();
      });
    }
    if (mwBtn) {
      paBtn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopImmediatePropagation();
        createEffectOnActor(
          this.actor,
          this.target,
          MORTAL_WEAKNESS_EFFECT_UUID
        );
        this.close();
      });
    }
    if (bdBtn) {
      paBtn.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopImmediatePropagation();
        createEffectOnActor(
          this.actor,
          this.target,
          BREACHED_DEFENSES_EFFECT_UUID
        );
        this.close();
      });
    }

    super._onRender(context, options);
  }

  async _prepareContext(options) {
    options.window.title = game.i18n.localize(
      "pf2e-thaum-vuln.exploitVulnerability.name"
    );

    const context = await super._prepareContext(options);

    /**
     * Prepare the context data for IWR
     */
    let evContext = {};
    const paDmg = 2 + Math.floor(this.actor.level / 2);
    const iwrData = getIWR(this.target);
    const hasBreachedDefenses = this.actor.itemTypes.feat.some(
      (f) => f.sourceId === BREACHED_DEFENSES_SOURCEID
    );
    const greatestWeakness = getGreatestIWR(iwrData.weaknesses);
    const hideValues = game.settings.get("pf2e-thaum-vuln", "mystifyNumbers");

    // If the IWR data array is populated, add it. Otherwise, don't. Not adding the array helps with the main.hbs template.
    for (const iwr of Object.keys(iwrData)) {
      if (iwrData[iwr].length > 0)
        evContext = { ...evContext, [iwr]: iwrData[iwr] };
    }

    if (this.rollDOS === 2 && evContext.weaknesses) {
      evContext.weaknesses = [greatestWeakness];
    }

    evContext.pa = { bonus: paDmg };
    evContext.hideValues = hideValues;
    evContext.rollDOS = this.rollDOS;

    /**
     * Prepare the buttons. Breached Defenses doesn't need a button if the feat doesn't exist.
     */
    let buttons = {
      pa: {
        type: "submit",
        label: game.i18n.localize("pf2e-thaum-vuln.personalAntithesis.name"),
        cssClass: "personal-antithesis",
      },
    };

    if (evContext.weaknesses)
      buttons = {
        ...buttons,
        mw: {
          type: "submit",
          label: game.i18n.localize("pf2e-thaum-vuln.mortalWeakness.name"),
          cssClass: "mortal-weakness",
        },
      };

    /**
     * Context changes for if the thaumaturge has Breached Defenses
     */
    if (hasBreachedDefenses) {
      const greatestBypassableResistance = BDGreatestBypassableResistance(
        this.target
      );
      evContext.breachedDefenses = {
        hasBreachedDefenses: hasBreachedDefenses,
        greatestBypassable: greatestBypassableResistance,
      };

      if (evContext.breachedDefenses.greatestBypassable)
        buttons = {
          ...buttons,
          bd: {
            type: "submit",
            label: game.i18n.localize("pf2e-thaum-vuln.breachedDefenses.name"),
            cssClass: "breached-defenses",
          },
        };
    }

    const mergedContext = foundry.utils.mergeObject(context, {
      evContext,
      buttons,
    });

    return mergedContext;
  }
}
